{"version":3,"sources":["utils/helpers.js","containers/Layout/reducer.js","components/Cell/styles.js","components/Cell/index.js","containers/Layout/actions.js","containers/Layout/types.js","components/GameHeader/index.js","components/Gameboard/index.js","containers/Layout/index.js","style/theme.js","App.js","reportWebVitals.js","index.js"],"names":["initCellState","isMine","hasFlag","isOpen","count","id","forBoardSize","boardSize","callback","row","col","join","forSurroundCells","coordinate","p","coords","split","Number","parseCoordinates","x","y","revealCell","board","cell","newBoard","openAround","toggleFlag","resetGame","mineLocations","emptyBoard","forEach","mineCheckCoord","hasLost","Object","values","some","generateMines","mineCount","locations","length","Math","floor","random","includes","push","defaultStore","minesweeperReducer","state","action","type","boardHelpers","BaseCell","styled","Box","props","theme","colors","greyblue","OpenedCell","color","handleColor","children","textColor","CoveredCell","OpenCell","icon","faBomb","ClosedCell","FlagCell","faFlag","Cell","dispatch","useDispatch","onClick","onContextMenu","e","preventDefault","GameHeader","useSelector","useState","counter","setCounter","resetTimer","setResetTimer","flagCount","filter","gameStatus","tick","useCallback","useEffect","timer","setInterval","clearInterval","alignItems","justifyContent","mb","width","role","faSadCry","size","faSmileBeam","faMeh","gameFace","textAlign","faClock","Gameboard","gameboard","table","boardDim","sqrt","keys","generateGrid","alignContent","mx","map","cells","Layout","py","sx","background","breakpoints","fontSizes","blue","lightgray","palelavender","space","fonts","body","heading","monospace","fontWeights","bold","lineHeights","initAction","App","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07a3e6e3.chunk.js","sourcesContent":["const initCellState = {\n  isMine: false,\n  hasFlag: false,\n  isOpen: false,\n  count: 0,\n  id: null,\n};\n\nconst SEPARATOR = \",\";\n\nconst parseCoordinates = (id) => {\n  const coords = id.split(SEPARATOR);\n  const row = Number(coords[0]);\n  const col = Number(coords[1]);\n  return { row, col };\n};\n\nconst forBoardSize = (boardSize, callback) => {\n  for (let row = 0; row < boardSize; row++) {\n    for (let col = 0; col < boardSize; col++) {\n      const coordinate = [row, col].join(SEPARATOR);\n      callback(coordinate, row, col);\n    }\n  }\n};\n\nconst forSurroundCells = (coordinate, callback) => {\n  const p = parseCoordinates(coordinate);\n\n  for (let x = p.row - 1; x <= p.row + 1; x++) {\n    for (let y = p.col - 1; y <= p.col + 1; y++) {\n      if (x >= 0 || y >= 0) {\n        const surroundCoord = [x, y].join(SEPARATOR);\n        callback(surroundCoord, x, y);\n      }\n    }\n  }\n};\n\nconst revealCell = (board, id) => {\n  if (board[id].isOpen || board[id].hasFlag) {\n    return board;\n  }\n\n  const cell = { ...board[id], isOpen: true };\n  const newBoard = { ...board, [id]: cell };\n  if (cell.count === 0 && !cell.isMine) {\n    return openAround(newBoard, id);\n  }\n  return newBoard;\n};\n\nconst toggleFlag = (board, id) => {\n  if (board[id].isOpen) {\n    return board;\n  }\n  const cell = { ...board[id], hasFlag: !board[id].hasFlag };\n  const newBoard = { ...board, [id]: cell };\n  return newBoard;\n};\n\nconst openAround = (board, id) => {\n  let newBoard = { ...board };\n\n  forSurroundCells(id, (coordinate) => {\n    if (\n      newBoard[coordinate] &&\n      !newBoard[coordinate].isMine &&\n      !newBoard[coordinate].isOpen\n    ) {\n      newBoard = revealCell(newBoard, coordinate);\n    }\n  });\n  return newBoard;\n};\n\nconst open = (board, id) => {\n  if (board[id].isOpen || board[id].hasFlag) {\n    return board;\n  }\n\n  const cell = { ...board[id], isOpen: true };\n  const newBoard = { ...board, [id]: cell };\n  if (cell.count === 0 && !cell.isMine) {\n    return openAround(newBoard, id);\n  }\n  return newBoard;\n};\n\nconst emptyBoard = (boardSize) => {\n  const board = {};\n  forBoardSize(boardSize, (coordinate) => {\n    board[coordinate] = { ...initCellState, id: coordinate };\n  });\n  return board;\n};\n\nconst resetGame = (boardSize, mineLocations) => {\n  const board = emptyBoard(boardSize);\n\n  mineLocations.forEach((coordinate) => {\n    board[coordinate].isMine = true;\n  });\n\n  forBoardSize(boardSize, (coordinate) => {\n    if (!board[coordinate].isMine) {\n      forSurroundCells(coordinate, (mineCheckCoord) => {\n        if (board[mineCheckCoord] && board[mineCheckCoord].isMine) {\n          board[coordinate].count += 1;\n        }\n      });\n    }\n  });\n  return board;\n};\n\nconst hasLost = (board) =>\n  Object.values(board).some((cell) => cell.isMine && cell.isOpen);\n\nconst hasWon = (board) => {\n  if (hasLost(board)) {\n    return false;\n  }\n\n  const nonOpenCount = Object.values(board).filter(\n    (cell) => !cell.isOpen\n  ).length;\n  const flaggedMineCount = Object.values(board).filter(\n    (cell) => cell.isMine && cell.hasFlag\n  ).length;\n  return nonOpenCount === flaggedMineCount;\n};\n\nconst notPlaying = (board) => {\n  const openAndFlagged = Object.values(board).filter(\n    (cell) => cell.hasFlag || cell.isOpen\n  ).length;\n  return openAndFlagged === 0;\n};\n\nconst flagCount = (board) =>\n  Object.values(board).filter((cell) => cell.hasFlag).length;\n\nconst mineLocations = (boardSize, mineCount) => {\n  const locations = [];\n\n  while (locations.length < mineCount) {\n    const x = Math.floor(Math.random() * boardSize);\n    const y = Math.floor(Math.random() * boardSize);\n    const coords = `${x},${y}`;\n    if (!locations.includes(coords)) {\n      locations.push(coords);\n    }\n  }\n  return locations;\n};\n\nconst generateMines = (boardSize, mineCount) =>\n  mineLocations(boardSize, mineCount);\n\nexport {\n  generateMines,\n  emptyBoard,\n  flagCount,\n  forBoardSize,\n  forSurroundCells,\n  revealCell,\n  resetGame,\n  toggleFlag,\n  hasWon,\n  notPlaying,\n  hasLost,\n  open,\n};\n","import * as boardHelpers from \"../../utils/helpers\";\n\nconst defaultStore = {\n  board: {},\n};\n\nconst minesweeperReducer = (state = defaultStore, action = { type: \"\" }) => {\n  switch (action.type) {\n    case \"RESET_GAME\": {\n      const boardSize = 16;\n      const mineLocations = boardHelpers.generateMines(boardSize, 40);\n      const board = boardHelpers.resetGame(boardSize, mineLocations);\n      return { ...state, board };\n    }\n\n    case \"REVEAL_CELL\": {\n      const board = boardHelpers.revealCell(state.board, action.id);\n      return { ...state, board };\n    }\n\n    case \"TOGGLE_FLAG\": {\n      const board = boardHelpers.toggleFlag(state.board, action.id);\n      return { ...state, board };\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default minesweeperReducer;\n","import { Box } from \"rebass/styled-components\";\nimport styled from \"styled-components\";\n\nconst handleColor = (color) => {\n  switch (color) {\n    case 1:\n      return \"#009DB0\";\n    case 2:\n      return \"#00D2A8\";\n    case 3:\n      return \"#00D363\";\n    case 4:\n      return \"#FFB200\";\n    case 5:\n      return \"#FF6A30\";\n    case 6:\n      return \"#FF5C17\";\n    case 7:\n      return \"#FF4838\";\n    case 8:\n      return \"#FF3625\";\n    default:\n      return \"#000000\";\n  }\n};\n\nconst BaseCell = styled(Box)`\n  background-color: ${(props) => props.theme.colors.greyblue};\n  width: 35px;\n  height 35px;\n  margin: 2px;\n  border-radius: 5px;\n  border: 1px solid grey;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst OpenedCell = styled(BaseCell)`\n  background: #efefef;\n  height: 33px;\n  margin: 0;\n  border: 0;\n  color: ${(props) => handleColor(props?.children[0]?.props?.textColor)};\n`;\n\nconst CoveredCell = styled(BaseCell)`\n  height: 33px;\n  margin: 0;\n  border: 0;\n`;\n\nexport { BaseCell, OpenedCell, CoveredCell };\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport { Box } from \"rebass/styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBomb, faFlag } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { revealCell, toggleFlag } from \"../../containers/Layout/actions\";\n\nimport { BaseCell, OpenedCell, CoveredCell } from \"./styles\";\n\nconst OpenCell = ({ count, isMine }) => (\n  <OpenedCell>\n    {!isMine && <Box textColor={count}>{count === 0 ? \"\" : count}</Box>}\n    {isMine && <FontAwesomeIcon icon={faBomb} color=\"black\" />}\n  </OpenedCell>\n);\n\nconst ClosedCell = () => <CoveredCell />;\nconst FlagCell = () => <FontAwesomeIcon icon={faFlag} color=\"#FF3625\" />;\n\nconst Cell = ({ id, count, isMine, isOpen, hasFlag }) => {\n  const dispatch = useDispatch();\n  return (\n  <BaseCell\n    onClick={() => dispatch(revealCell(id))}\n    onContextMenu={(e) => {\n      e.preventDefault();\n      dispatch(toggleFlag(id));\n    }}\n  >\n    {!isOpen && !hasFlag && <ClosedCell />}\n    {!isOpen && hasFlag && <FlagCell />}\n    {isOpen && <OpenCell isMine={isMine} count={count} />}\n  </BaseCell>\n)};\n\nOpenCell.propTypes = {\n  count: PropTypes.number.isRequired,\n  isMine: PropTypes.bool.isRequired,\n};\n\nCell.propTypes = {\n  ...OpenCell.propTypes,\n  id: PropTypes.string.isRequired,\n  hasFlag: PropTypes.bool.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n};\n\nexport default Cell","import { RESET_GAME, REVEAL_CELL, TOGGLE_FLAG } from \"./types\";\n\nconst resetGame = () => {\n  return {\n    type: RESET_GAME,\n  };\n};\n\nconst revealCell = (id) => {\n  return {\n    type: REVEAL_CELL,\n    id,\n  };\n};\n\nconst toggleFlag = (id) => {\n  return {\n    type: TOGGLE_FLAG,\n    id,\n  };\n};\n\nexport { resetGame, revealCell, toggleFlag };\n","const RESET_GAME = \"RESET_GAME\";\nconst REVEAL_CELL = \"REVEAL_CELL\";\nconst TOGGLE_FLAG = \"TOGGLE_FLAG\";\n\nexport { RESET_GAME, REVEAL_CELL, TOGGLE_FLAG };\n","import React, { useEffect, useCallback, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { Box, Flex } from \"rebass/styled-components\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faClock,\n  faFlag,\n  faSmileBeam,\n  faSadCry,\n  faMeh,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport * as boardHelpers from \"../../utils/helpers\";\nimport { resetGame } from \"../../containers/Layout/actions\";\n\nconst GameHeader = () => {\n  const board = useSelector((state) => state.board);\n  const dispatch = useDispatch();\n\n  const [counter, setCounter] = useState(0);\n  const [resetTimer, setResetTimer] = useState(true);\n\n  const flagCount = boardHelpers.flagCount(board);\n\n  let gameStatus = \"playing\";\n\n  if (boardHelpers.hasWon(board)) {\n    gameStatus = \"winner\";\n  }\n\n  if (boardHelpers.hasLost(board)) {\n    gameStatus = \"lost\";\n  }\n\n  if (boardHelpers.notPlaying(board)) {\n    gameStatus = \"notPlaying\";\n  }\n\n  const tick = useCallback(() => {\n    if (gameStatus === \"notPlaying\") {\n      setCounter(0);\n      setResetTimer(true);\n    }\n\n    if (gameStatus === \"playing\") {\n      setCounter(resetTimer ? 0 : counter + 1);\n      setResetTimer(false);\n    } else {\n      setResetTimer(true);\n    }\n  }, [counter, gameStatus, resetTimer]);\n\n  const gameFace = (gameStatus) => {\n    if (gameStatus === \"lost\") {\n      return <FontAwesomeIcon icon={faSadCry} color=\"darkgrey\" size=\"3x\" />;\n    }\n    if (gameStatus === \"winner\") {\n      return <FontAwesomeIcon icon={faSmileBeam} color=\"#00D363\" size=\"3x\" />;\n    }\n    return <FontAwesomeIcon icon={faMeh} color=\"#FFB200\" size=\"3x\" />;\n  };\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      tick();\n    }, 1000);\n    return () => {\n      clearInterval(timer);\n    };\n  }, [tick]);\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" mb={3}>\n      <Box width={1 / 4}>\n        <FontAwesomeIcon icon={faFlag} color=\"#FF3625\" /> {`${flagCount}`}\n      </Box>\n      <Box role=\"button\" onClick={() => dispatch(resetGame())}>\n        {gameFace(gameStatus)}\n      </Box>\n      <Box width={1 / 4} textAlign=\"right\">\n        <FontAwesomeIcon icon={faClock} color=\"#FFB200\" /> {counter}\n      </Box>\n    </Flex>\n  );\n};\n\nexport default GameHeader;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { Flex, Box } from \"rebass/styled-components\";\n\nimport * as boardHelpers from \"../../utils/helpers\";\nimport Cell from \"../Cell\";\nimport GameHeader from \"../GameHeader\";\n\nexport const generateGrid = (board) => {\n  const table = [];\n  const boardDim = Math.sqrt(Object.keys(board).length);\n  boardHelpers.forBoardSize(boardDim, (coordinate, row, col) => {\n    if (!table[row]) {\n      table[row] = [];\n    }\n    table[row][col] = board[coordinate];\n  });\n  return table;\n};\n\nconst Gameboard = () => {\n  const board = useSelector((state) => state.board);\n  const gameboard = generateGrid(board);\n\n  return (\n    <Flex alignContent=\"center\">\n      <Box mx=\"auto\">\n        <GameHeader />\n        {gameboard.map((cells, row) => (\n          <Flex key={`mine-row-${row}`}>\n            {cells.map((cell) => (\n              <Cell key={`mine-cell-${cell.id}`} {...cell} />\n            ))}\n          </Flex>\n        ))}\n      </Box>\n    </Flex>\n  );\n};\n\nexport default Gameboard;\n","import React from \"react\";\nimport { Box } from \"rebass/styled-components\";\n\nimport Gameboard from \"../../components/Gameboard\";\n\nconst Layout = () => (\n  <Box width={1}>\n    <Box\n      py={3}\n      mb={3}\n      sx={{\n        background: \"black\",\n        textAlign: \"center\",\n        color: \"lightgray\",\n      }}\n    >\n      <h1>Minesweeper</h1>\n    </Box>\n    <Gameboard />\n  </Box>\n);\n\nexport default Layout;\n","const theme = {\n  breakpoints: [\"40em\", \"52em\", \"64em\"],\n  fontSizes: [12, 14, 16, 20, 24, 32, 48, 64],\n  colors: {\n    blue: \"#07c\",\n    lightgray: \"#f6f6ff\",\n    palelavender: \"#d1cfe2\",\n    greyblue: \"#9cadce\",\n  },\n  space: [0, 4, 8, 16, 32, 64, 128, 256],\n  fonts: {\n    body: \"system-ui, sans-serif\",\n    heading: \"inherit\",\n    monospace: \"Menlo, monospace\",\n  },\n  fontWeights: {\n    body: 400,\n    heading: 700,\n    bold: 700,\n  },\n  lineHeights: {\n    body: 1.5,\n    heading: 1.25,\n  },\n};\n\nexport default theme;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport { ThemeProvider } from \"styled-components\";\n\nimport minesweeperReducer from \"./containers/Layout/reducer\";\n\nimport Layout from \"./containers/Layout\";\nimport theme from \"./style/theme\";\n\nconst initAction = {\n  type: 'RESET_GAME',\n};\n\nconst App = () => {\n  const store = createStore(\n    minesweeperReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  );\n  store.dispatch(initAction);\n\n  return (\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <Layout />\n      </ThemeProvider>\n    </Provider>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}